{
	"info": {
		"_postman_id": "051509fc-9777-491c-afa0-f095428d65d0",
		"name": "HM_2_Postman_MashaHurskaya",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21683416"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							" \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Correct type\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"const jsonResponse = pm.response.json();\r",
							" \r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"rec_name\", () => {\r",
							"  pm.expect(jsonResponse.name).to.eql('Masha');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"rec_age\", () => {\r",
							"  pm.expect(jsonResponse.age).to.eql('27');\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"rec_salary\", () => {\r",
							"  pm.expect(jsonResponse.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"const jsonRequest = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_name\", () => {\r",
							"  pm.expect(jsonResponse.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"rec_age\", () => {\r",
							"  pm.expect(jsonResponse.age).eql(jsonRequest.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"rec_salary\", () => {\r",
							"  pm.expect(jsonResponse.salary).to.eql(Number(jsonRequest.salary));\r",
							"});\r",
							" \r",
							" // 11. Вывести в консоль параметр family из response.\r",
							"console.log('family:');\r",
							"console.log(jsonResponse.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"rec_salary\", () => {\r",
							"  pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql(Number(jsonRequest.salary) * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const jsonRequest = request.data;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_name\", () => {\r",
							"  pm.expect(jsonResponse.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"rec_age\", () => {\r",
							"  pm.expect(jsonResponse.age).eql(jsonRequest.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"rec_salary\", () => {\r",
							"  pm.expect(jsonResponse.salary).to.eql(Number(jsonRequest.salary));\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log('family:');\r",
							"console.log(jsonResponse.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_name\", () => {\r",
							"    pm.expect(jsonResponse.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age\", () => {\r",
							"    pm.expect(jsonResponse.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_name_value\", () => {\r",
							"    pm.expect(jsonResponse.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_age_value\", () => {\r",
							"    pm.expect(jsonResponse.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Masha&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const jsonRequest = request.data;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_name\", () => {\r",
							"  pm.expect(jsonResponse.name).to.eql(jsonRequest.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"rec_age\", () => {\r",
							"  pm.expect(jsonResponse.age).eql(Number(jsonRequest.age));\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log('request salary:');\r",
							"console.log(jsonRequest.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log('response salary:');\r",
							"console.log(jsonResponse.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('response salary 0:');\r",
							"console.log(jsonResponse.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('response salary 1:');\r",
							"console.log(jsonResponse.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('response salary 2:');\r",
							"console.log(jsonResponse.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"rec_salary_0\", () => {\r",
							"  pm.expect(jsonResponse.salary[0]).eql(Number(jsonRequest.salary));\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"rec_salary_1\", () => {\r",
							"  pm.expect(Number(jsonResponse.salary[1])).eql(Number(jsonRequest.salary) * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"rec_salary_2\", () => {\r",
							"  pm.expect(Number(jsonResponse.salary[2])).eql(Number(jsonRequest.salary) * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonResponse.name);\r",
							"pm.test(\"env_name\", () => {\r",
							"  pm.expect(pm.environment.get(\"name\")).to.eql(jsonResponse.name);\r",
							"});\r",
							"\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonResponse.age);\r",
							"pm.test(\"env_age\", () => {\r",
							"  pm.expect(pm.environment.get(\"age\")).to.eql(jsonResponse.age);\r",
							"});\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonResponse.salary);\r",
							"pm.test(\"env_salary\", () => {\r",
							"  pm.expect(pm.environment.get(\"salary\")).to.eql(jsonResponse.salary);\r",
							"});\r",
							"\r",
							"// (для следующего запроса)\r",
							"pm.environment.set(\"salary_0\", jsonResponse.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log('response salary list:');\r",
							"for (const item of jsonResponse.salary) {\r",
							"    console.log(item);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Masha&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вcтавить параметр age из окружения в request\r",
							"// 3. Вставить параметр name из окружения в request\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const jsonRequest = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"res_start_qa_salary\", () => {\r",
							"   pm.expect(jsonResponse).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"res_qa_salary_after_6_months\", () => {\r",
							"   pm.expect(jsonResponse).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"res_qa_salary_after_12_months\", () => {\r",
							"   pm.expect(jsonResponse).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"res_qa_salary_after_1.5_year\", () => {\r",
							"   pm.expect(jsonResponse).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"res_qa_salary_after_3.5_years\", () => {\r",
							"   pm.expect(jsonResponse).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"res_person\", () => {\r",
							"   pm.expect(jsonResponse).to.have.property('person');\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"res_start_qa_salary_val\", () => {\r",
							"  pm.expect(jsonResponse.start_qa_salary).eql(Number(jsonRequest.salary));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"res_qa_salary_after_6_months_val\", () => {\r",
							"  pm.expect(jsonResponse.qa_salary_after_6_months).eql(Number(jsonRequest.salary) * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"res_qa_salary_after_12_months_val\", () => {\r",
							"  pm.expect(jsonResponse.qa_salary_after_12_months).eql(Number(jsonRequest.salary) * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"res_qa_salary_after_1.5_year_val\", () => {\r",
							"  pm.expect(jsonResponse['qa_salary_after_1.5_year']).eql(Number(jsonRequest.salary) * 3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"res_qa_salary_after_3.5_years_val\", () => {\r",
							"  pm.expect(jsonResponse['qa_salary_after_3.5_years']).eql(Number(jsonRequest.salary) * 3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"res_person_u_name_1_val\", () => {\r",
							"  pm.expect(jsonResponse.person['u_name'][1]).eql(Number(jsonRequest.salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"res_person_u_age_val\", () => {\r",
							"  pm.expect(jsonResponse.person['u_age']).eql(Number(jsonRequest.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"res_person_u_salary_5_years_val\", () => {\r",
							"  pm.expect(jsonResponse.person['u_salary_5_years']).eql(Number(jsonRequest.salary) * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log('response person:');\r",
							"for (const [key, value] of Object.entries(jsonResponse.person)) {\r",
							"  console.log(`${key}: ${value}`);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_0}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					""
				]
			}
		}
	]
}